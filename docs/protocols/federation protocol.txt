Federation Protocal
-----------------

Job: To sync documents containing waves between servers.
Existing Standards: XMPP (XML, TCP/IP), pubsub, TLS, Cryptographic keys & signatures.
	Relax-NG (illustrative)
Overview
---
Architecturally, a wave provider functions as a gateway to each wave. If the user creates a new wave, than it gets stored by their wave provider which is called the host for that wave, and if they add a participant to the wave who uses a different provider, this standard is used by the other host to access and keep updated the original wave.
This standard is a TLS-secured XMPP extension used by providers to access and update waves not from the provider, and to serve waves. It is designed to be more powerful and collaborative than the client APIs, so as to scale more easily.

Connection
---
This standard expects a bi-directional TLS secured stream, set up by the XMPP standard. Certain stanzas (XMPP concept) requires cryptographic keys and signatures.

Documents and Operations
---
This standard works, once a secure connection has been made, by requesting/serving documents and updating them with operations. This section documents what goes into these documents and operators.

Document
--
Although the stanzas don't communicate the document, the operators they do work on a specific data model. These documents are identified by an ID inside it's wavelet. The document is made up of a sequence of tags which can be a start tag, end tag, or content which contain a hashtable or simalor of attributes and a name. To simplify matters, think of this like XML, although storage is up to the server/provider.

Operator
--
This standard communicates documents and changes to documents as a sequence of operators. These operators move over an existing document and can do one of four things: insert content, remove content, change attributes, and move the virtual cursor. A full list of operators is in the table. In the table I will refer to the input (document) and the output (document).

 Operator		Input Doc		Output Doc
 --------		---------		----------
 retain(itemCount)	moves cursor itemcount.	Copies input content.
 replaceAttributes(	Moves cursor one over 	Copies tag type into output
   oldAttributes,	start tag with		and assigns attrs to
   newAttributes)	oldAttributes.		newAttribrutes.
 updateAttributes(	(More succinct version of replaceAttributes where
   attributesUpdate)	attributes is a hashtable of (oldAttr, newAttr).)
 charactors(charactors) Retains cursor position. Inserts charactors.
 elementStart(type,	Retains cursor position. Inserts start tag with
   attrs)					type and attrs.
 elementEnd		Retains cursor position. Inserts end tag.
 deleteCharactors(	Moves cursor over 	Retains cursor position.
   charactors)		charactors.
 deleteElementStart(	Moves cursor one over	Retains cursor position.
   type, attrs)		start tag with type and
			attrs.
 deleteElementEnd	Moves cursor one over 	Retains cursor position.
			end tag.
 annotationsBoundary(	moves curser one.	Ends end annotations and
   ends, changes)				alters annotations
						according to changes,
					    applies like updateAttributes()

Security
---
Once a secure connection is made, both servers exchange cryptographic keys before the client server may update waves. This is important because this standard does not require authentication of the user to view waves out of necessity, which means without cryptography, this protocol would be a big loophole for malicious software to view private waves.

Stanzas
---
Wave provides a number of stanzas serving mostly on a request-response basis but also on a one direction basis for some.

 Element	Attribute/Content	Description
 -------	-----------------	-----------
 delta-history				Calls for a historical wave using operations.
		wavelet-name		The wavelet name as descussed previously.
		start-version		Version number (inclusive) from which to
					retrieve the wavelet's history. (Note that
					the start version MUST fall on a delta
					boundary).
		start-version-hash	The hash for the associated start version.
		end-version		Ending version number (exclusive) up to which
					to retrieve the wavelet's history. (Note that
					the end version MUST fall on a delta
					boundary).
		end-version-hash	The hash for the associated end version.
		response-length-limit	OPTIONAL, Advice from the requester about the
					preferred response limit, measured as the
					aggregate number of characters in the XML
					serialization of the applied deltas in the
					response. The responder is advised but not
					required to respect the limit. Moreover, the
					responder may operate with a lower limit of
					its own and send back a smaller message than
					requested. When the responder exercises
					either its own or the requester's limit, it
					will return only a prefix of the requested
					wavelet deltas. Unless the version range is
					empty, the responder will always return a
					minimum of one wavelet delta (the first) even
					if its length exceeds the responders or
					requester's limits.
 submit-request				Applies an update to the document.
		<delta/>		The update to apply as a delta, discussed
					previously.
 submit-response			Returned from a submit-request.
		operations-applied	The number of operations applied by host.
		application-timestamp	The Unix timestamp of time the delta was
					applied.
		error-message		OPTIONAL, error encountered.
		<hashed-version/>	The version and history hash of the wavelet.
 wavelet-update				Sent by the server to update clients.
		wavelet-name		The name of the wavelet changed.
		<applied-delta/>+	The deltas applied.
		<commit-notice/>	OPTIONAL, commit information.
 signature-request			Requests credentials from host.
		history-hash		(State of request)
		version
		wavelet-name
 signature				The server's certificate(s).
		domain			The server's domain.
		algorithm		The algorithm for the certificate encoding.
		<certificate/>+		Contains the certificate stripped of the
					BEGIN CERTIFICATE and END CERTIFICATE.
 signature-response			Sent by server to show acceptance of the
					client's signature.

XML
---
The stanzas above use a lot of the same XML. This section documents that XML.

Elements
--
 Element	Attribute/Content	Description
 -------	-----------------	-----------
 hashed-version				Current history information.
		version			The incremental version of the wavelet.
		history-hash		Hash computed as H(n) = SHA256( H(n-1) +
					delta )[0..20]. (the + means concatenate)
 commit-notice				Varient of hashed version used to indicate
					that there's nothing more recent.
		version			The incremental version of the wavelet.
 delta					Stores a delta to a document.
		wavelet-name		The wavelet's name.
		<operation/>*		The operations applied in order.
 applied-delta				Varient of delta used to indicate it has been
					applied.
		<operation/>*		The operations applied.
 operation				An operation as described in Documents and
					Operations:Operations. Contains comma
					seperated string values of args. (hashes and
					arrays are as in JSON).
		op			The operation's name.

wavelet-name
--
The 'wavelet-name' attribute is an encoded form of the following components:

  -A "wave id" specifies the domain of the wave provider that originally started the wave, plus an identifier unique within that domain. The identifier starts with "w+" by convention.
  -A "wavelet id" specifies the domain of the wave provider that hosts the wavelet, plus a unique identifier which is unique within all wavelets with that domain. The identifier starts with "conv+" by convention. The first wavelet added to a wave has the identifier "conv+root" by convention.

These components are encoded into a single string in the format of a an absolute URI. The wavelet id domain is used as the host part (since this is where the wavelet is hosted). The wave id is used as the first path element, which contains the wave id domain if it does not match the wavelet id domain, in this case it is prepended to a unique identifier with a '$' delimiter. The unique identifier in the wavelet id is the final path element. URI generic delimiter characters (:/?#[]@) appearing in the id parts must be percent- escaped.

RelaxNG specification
---
namespace default = ""
namespace pubsub = "http://jabber.org/protocol/pubsub"
namespace disco = "http://jabber.org/protocol/disco#info"
namespace rec   = "urn:xmpp:receipts"  # NAMESPACE_XMPP_RECEIPTS
namespace discoitems = "http://jabber.org/protocol/disco#items"  # NAMESPACE_DISCO_ITEMS
namespace pubsubevt = "http://jabber.org/protocol/pubsub#event" # NAMESPACE_PUBSUB_EVENT
namespace wavesrv = "http://waveprotocol.org/protocol/0.2/waveserver" # NAMESPACE_WAVE_SERVER
namespace rcpt = "urn:xmpp:receipts"


## Our possible iq children
start = update
      | submitrequest | submitresponse
      | history-request | history-response
      | signer-get-request | signer-get-response
      | signer-post-request | signer-post-response

## Envelope to push wavelet operations. Used in iq set stanza.
update =
  element message {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element rcpt:request { empty },
    element pubsubevt:event {
      element pubsubevt:items {
        element pubsubevt:item {
          element wavesrv:wavelet-update {
            attribute wavelet-name { xsd:string },
            element wavesrv:applied-delta { text }*,
            commit-notice?
          } *
        }
      }
    }
  }


## Request for historical wavelet operations. Used in iq get stanza.
history-request =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:items {
        attribute node { text }, # set to "wavelet"
        element wavesrv:delta-history {
          attribute wavelet-name { xsd:string },
          attribute start-version { xsd:integer },
          attribute start-version-hash { xsd:string },
          attribute end-version { xsd:integer },
          attribute end-version-hash { xsd:string },
          attribute response-length-limit { xsd:integer }?
        } *
      }
    }
  }

## Response to history-request. Used in iq result stanza.
history-response =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:items {
        element pubsub:item {
          element wavesrv:applied-delta {
            text
          }
          | element wavesrv:history-truncated {
            attribute version { xsd:integer }
          }
          | commit-notice
        } *
      }
    }
  }

## Request to submit operations to a wavelet. Used in iq set stanza.
submitrequest =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:publish {
        attribute node { xsd:string },
        element pubsub:item {
          element wavesrv:submit-request {
            element wavesrv:delta {
              attribute wavelet-name { xsd:string },
              text
            }
          }
        }
      }
    }
  }

## Response to submit-request. Used in iq result stanza.
submitresponse =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:publish {
        element pubsub:item {
          element wavesrv:submit-response {
            attribute application-timestamp { xsd:integer },
            attribute operations-applied { xsd:integer },
            attribute error-message { xsd:string }?,
            hashed-version
          }
        }
      }
    }
  }


## Signer get request
signer-get-request =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:items {
        attribute node { xsd:string }, # need to be hardcoded value "signer"
        element wavesrv:signer-request {
          attribute signer-id {xsd:string },
          attribute wavelet-name { xsd:string },
          version-hash-attributes
        }
      }
    }
  }

## Signer get response
signer-get-response =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:items {
        element wavesrv:signature {
          attribute domain { text },
          attribute algorithm { text },
          element wavesrv:certificate { text } +
        }
      }
    }
  }



## Signer post request
signer-post-request =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:publish {
        attribute node { xsd:string }, # need to be hardcoded value "signer"
        element pubsub:item {
          element wavesrv:signature {
            attribute domain { text },
            attribute algorithm { text },
            element wavesrv:certificate { text } +
          }
        }
      }
    }
  }

## Signer post response
signer-post-response =
  element iq {
    attribute id   { text },
    attribute from { text },
    attribute to   { text },
    attribute type { text },
    element pubsub:pubsub {
      element pubsub:publish {
        element pubsub:item {
          attribute node { xsd:string }, # need to be hardcoded value "signer"
          element wavesrv:signature-response { empty }
        }
      }
    }
  }


## A wavelet version and the wavelet's history hash at that version.
version-hash-attributes =
  attribute version { xsd:integer } & attribute history-hash { xsd:string }

## Notification of the fact that the host provider has persisted a
## wavelet up to the specified version.
commit-notice =
  element wavesrv:commit-notice {
    attribute version { xsd:integer }
  }

## Describes a wavelet version and the wavelet's history hash at that version.
hashed-version =
  element wavesrv:hashed-version {
    version-hash-attributes
  }
